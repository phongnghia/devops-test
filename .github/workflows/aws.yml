<<<<<<< HEAD
# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

=======
>>>>>>> devops-test
name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: AWS_REGION
  ECR_REPOSITORY: MY_ECR_REPOSITORY
  ECS_SERVICE: MY_ECS_SERVICE
  ECS_CLUSTER: MY_ECS_CLUSTER
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION
  PUBLIC_IP: ${{ env.PUBLIC_IP }}
  REMOTE_USERNAME: ${{ env.REMOTE_USERNAME }}
  REMOTE_PASSWORD: ${{ env.REMOTE_PASSWORD }}
  ECR_REPOSITORY_REGISTRY: ${{ env.ECR_REPOSITORY_REGISTRY }}
  AWS_ACCESS_KEY: ${{ env.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
  AWS_ECS_PROFILE_NAME: ${{ env.AWS_ECS_PROFILE_NAME }}
  CONTAINER_NAME: devops-test

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3

      - name: Replace inventory hosts file
        run: |
          export INVENTORY_HOSTS_FILE="deploy-aws/inventory/hosts.yml"
          sed -i "s#__REMOTE_IP__#$PUBLIC_IP#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__REMOTE_USERNAME__#$REMOTE_USERNAME#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__REMOTE_PASSWORD__#$REMOTE_PASSWORD#g" $INVENTORY_HOSTS_FILE 2>/dev/null
          sed -i "s#__ECR_REPOSITORY_REGISTRY__#$ECR_REPOSITORY_REGISTRY#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__AWS_REGION__#$AWS_REGION#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__AWS_ACCESS_KEY__#$AWS_ACCESS_KEY#g" $INVENTORY_HOSTS_FILE 2>/dev/null
          sed -i "s#__AWS_SECRET_ACCESS_KEY__#$AWS_SECRET_ACCESS_KEY#g" $INVENTORY_HOSTS_FILE 2>/dev/null
          sed -i "s#__AWS_CLUSTER_NAME__#$ECS_CLUSTER#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__AWS_ECS_PROFILE_NAME__#$AWS_ECS_PROFILE_NAME#g" $INVENTORY_HOSTS_FILE

      - name: Run pre-setup for CI/CD node
        run: |
          ansible-playbook -i deploy-aws/inventory/hosts.yml deploy-aws/install.yml \
          --skip-tags "build_stage,deployment_stage"

      - name: Run Build Stage
        run: |
          ansible-playbook -i deploy-aws/inventory/hosts.yml deploy-aws/install.yml \
          --skip-tags "pre_setup_stage,deployment_stage"

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run Test Stage
        run: ansible-playbook deploy-aws/test.yml

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Run Deploy Stage
        run: |
          ansible-playbook -i deploy-aws/inventory/hosts.yml deploy-aws/install.yml \
          --skip-tags "pre_setup_stage,build_stage"
