name: Deploy to Amazon ECS

on:
  push:
    branches: [ "devops-test" ]

env:
  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: devops-test           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3

      - name: Replace inventory hosts file
        run: |
          export INVENTORY_HOSTS_FILE="deploy-aws/inventory/hosts.yml"
          sed -i "s#localhost#$PUBLIC_IP#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__REMOTE_USERNAME__#$REMOTE_USERNAME#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__REMOTE_PASSWORD__#$REMOTE_PASSWORD#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__REMOTE_IP__#$PUBLIC_IP#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__ECR_REPOSITORY_REGISTRY__#$ECR_REPOSITORY_REGISTRY#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__AWS_REGION__#$AWS_REGION#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__AWS_ACCESS_KEY__#$AWS_ACCESS_KEY#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__AWS_SECRET_ACCESS_KEY__#$AWS_SECRET_ACCESS_KEY#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__AWS_CLUSTER_NAME__#$ECS_CLUSTER#g" $INVENTORY_HOSTS_FILE
          sed -i "s#__AWS_ECS_PROFILE_NAME__#$AWS_ECS_PROFILE_NAME#g" $INVENTORY_HOSTS_FILE

      - name: Run pre-setup for CI/CD node
        run: |
          ansible-playbook -i deploy-aws/inventory/hosts.yml deploy-aws/install.yml \
          --skip-tags "build_stage,deployment_stage"

      - name: Run Build Stage
        run: |
          ansible-playbook -i deploy-aws/inventory/hosts.yml deploy-aws/install.yml \
          --skip-tags "pre_setup_stage,deployment_stage"

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run Test Stage
        run: ansible-playbook deploy-aws/test.yml

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Run Deploy Stage
        run: |
          ansible-playbook -i deploy-aws/inventory/hosts.yml deploy-aws/install.yml \
          --skip-tags "pre_setup_stage,build_stage"

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push image to Amazon ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         # Build a docker container and
#         # push it to ECR so that it can
#         # be deployed to ECS.
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#     - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ${{ env.ECS_TASK_DEFINITION }}
#         container-name: ${{ env.CONTAINER_NAME }}
#         image: ${{ steps.build-image.outputs.image }}

#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: ${{ env.ECS_SERVICE }}
#         cluster: ${{ env.ECS_CLUSTER }}
#         wait-for-service-stability: true
