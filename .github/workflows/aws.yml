name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: AWS_REGION
  ECR_REPOSITORY: MY_ECR_REPOSITORY
  ECS_SERVICE: MY_ECS_SERVICE
  ECS_CLUSTER: MY_ECS_CLUSTER
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION
  PUBLIC_IP: 0.0.0.0
  REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}
  ECR_REPOSITORY_REGISTRY: ECR_REPOSITORY_REGISTRY
  AWS_ACCESS_KEY: AWS_ACCESS_KEY
  AWS_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
  AWS_ECS_PROFILE_NAME: AWS_ECS_PROFILE_NAME
  CONTAINER_NAME: devops-test
  IMAGE_TAG: "phongnghia/devops-test:latest"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3

#      - name: Replace inventory hosts file
#        run: |
#          export INVENTORY_HOSTS_FILE="deploy-aws/inventory/hosts.yml"
#          sed -i "s#__REMOTE_IP__#$PUBLIC_IP#g" $INVENTORY_HOSTS_FILE
#          sed -i "s#__REMOTE_USERNAME__#$REMOTE_USERNAME#g" $INVENTORY_HOSTS_FILE
#          sed -i "s#__REMOTE_PASSWORD__#$REMOTE_PASSWORD#g" $INVENTORY_HOSTS_FILE 2>/dev/null
#          sed -i "s#__ECR_REPOSITORY_REGISTRY__#$ECR_REPOSITORY_REGISTRY#g" $INVENTORY_HOSTS_FILE
#          sed -i "s#__AWS_REGION__#$AWS_REGION#g" $INVENTORY_HOSTS_FILE
#          sed -i "s#__AWS_ACCESS_KEY__#$AWS_ACCESS_KEY#g" $INVENTORY_HOSTS_FILE 2>/dev/null
#          sed -i "s#__AWS_SECRET_ACCESS_KEY__#$AWS_SECRET_ACCESS_KEY#g" $INVENTORY_HOSTS_FILE 2>/dev/null
#          sed -i "s#__AWS_CLUSTER_NAME__#$ECS_CLUSTER#g" $INVENTORY_HOSTS_FILE
#          sed -i "s#__AWS_ECS_PROFILE_NAME__#$AWS_ECS_PROFILE_NAME#g" $INVENTORY_HOSTS_FILE

      - name: Run pre-setup for CI/CD node
        run: |
          ansible-playbook deploy-docker/install.yml --skip-tags "build_stage,deployment_stage"

#      - name: Login to Docker Hub
#        uses: docker/login-action@v3.3.0
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Build Stage
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} > token.txt 2>/dev/null
          ansible-playbook deploy-docker/install.yml --skip-tags "pre_setup_stage,deployment_stage" \
          --extra-vars "dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }}"

#      - name: Build and push
#        uses: docker/build-push-action@v6
#        with:
#          push: true
#          tags: ${{ env.IMAGE_TAG }}

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3

      - name: Run pre-setup for CI/CD node
        run: |
          ansible-playbook deploy-docker/install.yml --skip-tags "build_stage,deployment_stage"

      - name: Run Test Stage
        run: ansible-playbook deploy-docker/test.yml

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3

      - name: Run pre-setup for CI/CD node
        run: |
          ansible-playbook deploy-docker/install.yml --skip-tags "build_stage,deployment_stage"

      - name: Run Deploy Stage
        run: |
          ansible-playbook deploy-docker/install.yml \
          --skip-tags "pre_setup_stage,build_stage"
#          --extra-vars "REMOTE_HOSTNAME=${{ secrets.REMOTE_HOSTNAME }} REMOTE_IP=${{ secrets.REMOTE_HOSTNAME }} 
#            REMOTE_USERNAME=${{ secrets.REMOTE_USERNAME }} 
#            REMOTE_SSH_PORT=22 REMOTE_PASSWORD=${{ secrets.REMOTE_PASSWORD }}"

